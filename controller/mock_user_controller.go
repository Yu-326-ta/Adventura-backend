// Code generated by MockGen. DO NOT EDIT.
// Source: controller/user_controller.go

// Package controller is a generated GoMock package.
package controller

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockIUserController is a mock of IUserController interface.
type MockIUserController struct {
	ctrl     *gomock.Controller
	recorder *MockIUserControllerMockRecorder
}

// MockIUserControllerMockRecorder is the mock recorder for MockIUserController.
type MockIUserControllerMockRecorder struct {
	mock *MockIUserController
}

// NewMockIUserController creates a new mock instance.
func NewMockIUserController(ctrl *gomock.Controller) *MockIUserController {
	mock := &MockIUserController{ctrl: ctrl}
	mock.recorder = &MockIUserControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserController) EXPECT() *MockIUserControllerMockRecorder {
	return m.recorder
}

// CsrfToken mocks base method.
func (m *MockIUserController) CsrfToken(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CsrfToken", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CsrfToken indicates an expected call of CsrfToken.
func (mr *MockIUserControllerMockRecorder) CsrfToken(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CsrfToken", reflect.TypeOf((*MockIUserController)(nil).CsrfToken), c)
}

// LogIn mocks base method.
func (m *MockIUserController) LogIn(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogIn", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogIn indicates an expected call of LogIn.
func (mr *MockIUserControllerMockRecorder) LogIn(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogIn", reflect.TypeOf((*MockIUserController)(nil).LogIn), c)
}

// LogOut mocks base method.
func (m *MockIUserController) LogOut(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogOut", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogOut indicates an expected call of LogOut.
func (mr *MockIUserControllerMockRecorder) LogOut(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogOut", reflect.TypeOf((*MockIUserController)(nil).LogOut), c)
}

// SignUp mocks base method.
func (m *MockIUserController) SignUp(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockIUserControllerMockRecorder) SignUp(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockIUserController)(nil).SignUp), c)
}
